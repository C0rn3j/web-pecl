<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE article PUBLIC "-//Norman Walsh//DTD DocBk XML V1.7//EN"
          "/home/ssb/cvs/php/phpdoc/dbxml/docbookx.dtd">
<article id="pear">
 <artheader>
  <title>PEAR: PHP Extension and Add-on Repository</title>
  <authorgroup>
   <author>
    <firstname>Stig</firstname>
    <surname>Bakken</surname>
   </author>
  </authorgroup>
  <revhistory>
   <revision>
    <revnumber>$Revision: 1.4 $</revnumber>
    <date>$Date: 2000-02-28 16:18:47 $</date>
    <authorinitials>$Author: ssb $</authorinitials>
   </revision>
  </revhistory>
 </artheader>
 
 <simpara>PEAR is dedicated to Malin Bakken, born 1999-11-21.</simpara>

 <simpara>
  This document is incomplete.  For now it only contains a brief
  description of PEAR and "Coding Rules and Guidelines".  The rules
  and guidelines are initial suggestions, and are open for discussion.
 </simpara>

 <section id="pear-whatis">
  <title>What is PEAR?</title>
  <simpara>
   PEAR is a code repository for PHP extensions and PHP library code
   inspired by TeX's CTAN and Perl's CPAN.
  </simpara>
  <simpara>
   The intention behind PEAR is to provide a means for library code
   authors to share their code with other developers, to give the PHP
   community an infrastructure for using third-party code, to define
   standards that help developers write code that runs in different
   PHP configurations, and to provide tools for code maintenance and
   distribution.
  </simpara>

 </section>

 <section id="pear-rules">
  <title>Coding Rules and Guidelines</title>
  <simpara>
   This section describes some rules that are meant to make PEAR code
   available to as many users as possible.  If you plan to contribute
   to PEAR, please read this section carefully and follow these rules,
   or someone will yell at you. :-)
  </simpara>

  <section id="pear-names">
   <title>Naming Conventions</title>

   <simpara>
    Use the extension <filename role="extension">.php</filename> for
    all files with PHP code (files that when included don't output
    anything, but only define variables, constants, functions or
    classes).
   </simpara>

   <para>
    A related set of one or more classes and functions in PEAR are
    called packages.  Not modules, since this term is already taken by
    Apache, and not extensions, because that is what PHP's bundled
    "modules" of C code are called.  "Packages" it is.
   </para>

   <para>
    The main structure in PEAR is the package structure.  Although
    this structure maps 1:1 down to the file system, it is
    conceptually not a filesystem structure.  The structure is based
    on the developer's view when writing code, which is the parameters
    to "use" or "import" (PEAR is currently using "include" though).
    An example:
    <informalexample>
     <literallayout>DB
    DB/common
    DB/mysql
HTML
    HTML/Form
</literallayout>
    </informalexample>
    Here, the names listed are the parameters the user will give the
    "use" or "import" PHP statements.  It maps down to the filesystem
    level by adding <filename role="extension">.php</filename>.  This
    means that each "top-level" node will have both a file and a
    directory in the top-level directory.  But we have an excuse for
    this: the PEAR structure is conceptually different from the
    filesystem structure, as explained above.  So there.
   </para>

   <section id="pear-funcnames">
    <title>Function and Method Names</title>
    <simpara>
     Functions (not methods), should be named with underscores, like
     this: <function>my_function</function>.  Methods should be named
     with initial lower-case studlycaps like this:
     <function>myFunction</function>.
    </simpara>
   </section>

   <section id="pear-classnames">
    <title>Class Names</title>
    <para>
     Class names are not as straightforward.  PEAR should never have
     name conflicts among its classes (and preferably ditto for
     functions, but that can be solved using static methods in
     classes).  Since PHP doesn't have packages or name spaces yet, we
     need to "brute force" it.  The solution is currently not too
     pretty, maybe it serves as inspiration for the Zend authors to
     implement name spaces :-).
    </para>
    <para>
     The basic class name rule is to use the package name and
     substitute slashes with underscores.  The package "DB/mysql" has
     its code in the file "DB/mysql.php" and defines a class called
     "DB_mysql".
    </para>
   </section>
  </section>

  <section id="pear-errors">
   <title>Returning Errors</title>
   <simpara>
    Your code should <emphasis>never</emphasis> use
    <function>exit</function> or <function>die</function> if it
    encounters an error.  This would make developers using your code
    unable to catch these errors, handle them or even display their
    own error message.  As far as possible, use some way of giving
    errors back to the caller, even if it is just a boolean return
    value.
   </simpara>
  </section>

  <section id="pear-options">
   <title>Depending on Optional Features</title>
   <simpara>
    PEAR code is meant to be useable with all (reasonable)
    configurations of PHP.  Since PHP is very configurable and many of
    its features are optional, this requires extra attention from you
    as a PEAR author to make sure that your code works with different
    configurations.
   </simpara>
   <para>
    One example is the <parameter>magic_quotes_gpc</parameter> config
    option.  PEAR code should work with this option enabled or
    disabled.  Here's an example of how to properly do that:
    <informalexample>
     <programlisting role="php">
// If magic_quotes_gpc is enabled, remove those slashes.
if (ini_get("magic_quotes_gpc")) {
    $arg = stripslashes($arg);
}
</programlisting>
    </informalexample>
   </para>

   <section id="pear-phptags">
    <title>PHP Code Block Tags</title>
    <simpara>
     Always use the <command>&lt;?php ?&gt;</command> syntax, the
     shorter forms such as <command>&lt;? ?&gt;</command> and
     <command>&lt;% %&gt;</command> may be disabled by the user.
    </simpara>
   </section>

   <section id="pear-gpcvars">
    <title>HTTP_*_VARS</title>
    <simpara>
     GET/POST/cookie can be configured to not be set in the global
     namespace, so PEAR code reading these should always use the
     global arrays <varname>$HTTP_GET_VARS</varname>,
     <varname>$HTTP_POST_VARS</varname>,
     <varname>$HTTP_COOKIE_VARS</varname>,
     <varname>$HTTP_SERVER_VARS</varname>,
     <varname>$HTTP_ENV_VARS</varname> and
     <varname>$HTTP_POST_FILES</varname> rather than the global
     variables.
    </simpara>
   </section>

   <section id="pear-scope">
    <title>Scope Issues</title>
    <simpara>
     If you need to set some global variables in the top-level part of
     your code (outside classes and functions), it is necessary to use
     <varname>$GLOBALS</varname> to make sure your variable is
     actually set in the global scope regardless of where your file is
     included from.
    </simpara>

    <para>
     It is possible, and often very useful, to include a file from
     within a function.  The included file will inherit the calling
     code's scope:

     <example>
      <title>file1.php</title>
      <programlisting role="html">
&lt;?php $myglobal = 42; ?&gt;
</programlisting>
     </example>

     <example>
      <title>file2.php</title>
      <programlisting role="html">
&lt;?php

class Foo {
    function Foo($arg) {
        if ($arg == 42) {
            include("file1.php");
        }
    }
}

?&gt;
</programlisting>
     </example>
    </para>

    <simpara>
     This actually sets <varname>$myglobal</varname> as a local
     variable in the <classname>Foo</classname> class's constructor
     function, not as a global variable.
    </simpara>
    
   </section>

  </section>

 </section>

</article>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-set-face:t
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-default-dtd-file:"article.ced"
sgml-auto-insert-required-elements:nil
End:
-->
