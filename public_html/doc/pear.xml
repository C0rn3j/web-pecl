<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE article PUBLIC "-//Norman Walsh//DTD DocBk XML V1.7//EN"
          "/home/ssb/cvs/php/phpdoc/dbxml/docbookx.dtd">
<article id="pear">
 <artheader>
  <title>PEAR: PHP Extension and Add-on Repository</title>
  <author>
   <firstname>Stig</firstname>
   <surname>Bakken</surname>
  </author>
 </artheader>
 
 <para>PEAR is dedicated to Malin Bakken, born 1999-11-21.</para>

 <section id="pear-whatis">
  <title>What is PEAR?</title>
  <simpara>
   PEAR is a code repository for PHP extensions and PHP library code
   similar to TeX's CTAN and Perl's CPAN.
  </simpara>
  <simpara>
   The intention behind PEAR is to provide a means for library
   code authors to organize their code in a standard way shared by
   other developers, and to give the PHP community a single source and
   single set of tools for getting such code.
  </simpara>
 </section>

 <section id="pear-admin">
  <title>Administration</title>
  <simpara>
   This section will describe the rules for how files are structured
   and how functions and classes should be named.
  </simpara>
 </section>

 <section id="pear-tools">
  <title>Tools</title>
  <simpara>
   This section will describe the tools provided to PEAR users.
  </simpara>
 </section>

 <section id="pear-rules">
  <title>Coding Rules and Guidelines</title>
  <simpara>
   This section describes some rules that are meant to make PEAR code
   available to as many users as possible.  If you plan to contribute
   to PEAR, please read this section carefully and follow these rules,
   or someone will yell at you. :-)
  </simpara>

  <section id="pear-rules-filenames">
   <title>File Naming Conventions</title>
   <simpara>
    Use the extension <filename role="extension">.php</filename> for
    all files with PHP code in them.
   </simpara>
  </section>

  <section id="pear-rules-options">
   <title>Depending on Optional Features</title>
   <simpara>
    PEAR code is meant to be useable with all (reasonable)
    configurations of PHP.  Since PHP is very configurable and many of
    its features are optional, this requires extra attention from you
    as a PEAR author to make sure that your code works with different
    configurations.
   </simpara>
   <para>
    One example is the <parameter>magic_quotes_gpc</parameter> config
    option.  PEAR code should work with this option enabled or
    disabled.  Here's an example of how to properly do that:
    <informalexample>
     <programlisting role="php">
// If magic_quotes_gpc is enabled, remove those slashes.
if (ini_get("magic_quotes_gpc")) {
    $arg = stripslashes($arg);
}
</programlisting>
    </informalexample>
   </para>

   <section id="pear-rules-phptags">
    <title>PHP Code Block Tags</title>
    <simpara>
     Always use the <command>&lt;?php ?&gt;</command> syntax, the
     shorter forms such as <command>&lt;? ?&gt;</command> and
     <command>&lt;% %&gt;</command> may be disabled by the user.
    </simpara>
   </section>

   <section id="pear-rules-gpcvars">
    <title>HTTP_*_VARS</title>
    <simpara>
     GET/POST/cookie can be configured to not be set in the global
     namespace, so PEAR code reading these should always use the
     global arrays <varname>$HTTP_GET_VARS</varname>,
     <varname>$HTTP_POST_VARS</varname>,
     <varname>$HTTP_COOKIE_VARS</varname>,
     <varname>$HTTP_SERVER_VARS</varname>,
     <varname>$HTTP_ENV_VARS</varname> and
     <varname>$HTTP_POST_FILES</varname> rather than the global
     variables.
    </simpara>
   </section>

   <section id="pear-rules-scope">
    <title>Scope Issues</title>
    <simpara>
     If you need to set some global variables in the top-level part of
     your code (outside classes and functions), it is necessary to use
     <varname>$GLOBALS</varname> to make sure your variable is
     actually set in the global scope regardless of where your file is
     included from.
    </simpara>

    <para>
     It is possible, and often very useful, to include a file from
     within a function.  The included file will inherit the calling
     code's scope:

     <example>
      <title>file1.php</title>
      <programlisting role="html">
&lt;?php $myglobal = 42; ?&gt;
</programlisting>
     </example>

     <example>
      <title>file2.php</title>
      <programlisting role="html">
&lt;?php

class Foo {
    function Foo($arg) {
        if ($arg == 42) {
            include("file1.php");
        }
    }
}

?&gt;
</programlisting>
     </example>
    </para>

    <simpara>
     This actually sets <varname>$myglobal</varname> as a local
     variable in the <classname>Foo</classname> class's constructor
     function, not as a global variable.
    </simpara>
    
   </section>

  </section>

 </section>

</article>

<!-- Keep this comment at the end of the file Local variables: mode:
sgml sgml-omittag:t sgml-shorttag:t sgml-minimize-attributes:nil
sgml-always-quote-attributes:t sgml-indent-step:1 sgml-indent-data:t
sgml-parent-document:nil sgml-exposed-tags:nil sgml-local-catalogs:nil
sgml-local-ecat-files:nil sgml-default-dtd-file:"article.ced"
sgml-auto-insert-required-elements:nil End: -->
